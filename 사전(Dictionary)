list1 = [2, 3, 5, 7, 11, 13]
print(list1[1])
print(list1[2] + list1[3])

이렇게 여러 값을 모을 수 있는 자료형으로 사전(dictionary)도 존재한다.
# 사전 (dictionary)
# key - value

dict1 = {}
print(type(dict1))

이건 <class 'dict'>

dict1[5] = 25
dict2[2] = 4
dict=[3] = 9

print(dict1)
{2: 4, 3: 9, 5: 25}

print(dict1[3])
9

사전과 리스트의 차이는 
리스트: index 가 0,1,2,~~ 순서대로 
사전: 순서란게 존재하지 않는다 인덱스가 뭐든지 될 수 있다

family = {}
family['mom'] = 'grace'
family['dad'] = 'chris'
family['son'] = 'young'
family['daughter'] = 'kay'

print(family)
{ 'son' :'young', 'mom' : 'grace', 'daughter' : 'kay', 'dad': "chris" }

print(family['dad'])
chris

사전(dictionary)은 순서가 없는 key-value 쌍의 집합입니다.

사전 만들기
비어있는 사전을 만들고 type 함수를 써서 어떤 자료형인지 출력해봅시다.

dict1 = {}
print(type(dict1))
<class 'dict'>
key가 정수인 경우
앞서 만든 dict1에 key-value 쌍을 몇개 추가해봅시다.

dict1[5] = 25
dict1[2] = 4
dict1[3] = 9

print(dict1)
{2: 4, 3: 9, 5: 25}
보시다시피 dict1에는 key가 2고 value가 4인 쌍, key가 3이고 value가 9인 쌍, 그리고 key가 5고 value가 25인 쌍이 생겼습니다.

value를 받아오기 위해서 리스트 인덱싱을 하듯이 key를 대괄호 안에 넣어주면 됩니다.

print(dict[5])
print(dict[2])
25
4
그럼 key가 정수형인 사전과 그냥 리스트의 차이점은 뭘까요? 리스트는 인덱스 0부터 시작하고 순서대로 채워지지만 사전은 순서가 없기때문에 0부터 시작하지 않고 아무 값들을 쓸 수 있습니다.

key가 정수가 아닌 경우
사전이 리스트와 가장 다른 점은 key가 정수뿐만 아니라 아무 자료형이나 될 수 있다는 것입니다.

family = {}
family['mom'] = 'grace'
family['dad'] = 'chris'
family['son'] = 'young'
family['daughter'] = 'kay'
이 경우 family 사전의 key는 문자열입니다. 값을 받아오기 위해서는 그냥 아래처럼 하면 됩니다.

print(family['dad'])
print(family['daughter'])
chris
kay


family라는 사전이 있습니다.

family = {}
family['mom'] = 'grace'
family['dad'] = 'chris'
family['son'] = 'young'
family['daughter'] = 'kay'
사전의 key 모두 받아오기
여기서 key들만 모두 받으려면 keys 메소드를 쓰면 됩니다.

print(family.keys())
dict_keys(['son', 'daughter', 'mom', 'dad'])
family에 어떤 key가 있는지 확인하려면 이렇게 하면 됩니다:

print('son' in family.keys())
print('uncle' in family.keys())
True
False
그리고 family의 key들을 리스트로 쓰고 싶으면 list 함수로 형 변환을 하면 됩니다.

family_keys = list(family.keys())
print(family_keys)
print(type(family_keys))
['dad', 'daughter', 'mom', 'son']
<class 'list'>
사전의 value 모두 받아오기
value들을 모두 받기 위해서 values 메소드를 쓰면 됩니다.

print(family.values())
dict_values(['young', 'chris', 'kay', 'grace'])
family에 어떤 value가 있는지 확인하려면 이렇게 하면 됩니다:

print('grace' in family.values())
print('yoonsoo' in family.values())
True
False
그리고 family의 value들을 리스트로 쓰고 싶으면 list 함수로 형 변환을 하면 됩니다.

family_values = list(family.values())
print(family_values)
print(type(family_values))
['young', 'chris', 'kay', 'grace']
<class 'list'>
