파이썬에 이미 있는 자료형을 써도 되고...
integer 4
Floating Point 3.14
Boolean True
String "Hello World!"
List [2, 3, 5, 7, 9]

내가 자료형을 만들어 써도 됩니다!
user
card
album
assignment
house
monster
weapon
song
student
....

class
-자료형에 대한 설명서
-자료형의 틀

- 이 자료형은 어떻게 생성하는가?
- 이 자료형은 어떤 정보들을 보관하는가?
- 이 자료형에는 어떤 연산들과 함수들을 쓸 수 있는가?

list = [2, 3, 5, 7, 11]        이 자료형은 어떻게 생성하는가?
print(list1[2])                이 자료형은 어떤 정보들을 보관하는가?  요소들값, 요소 개수
list1.append(13)               이 자료형에는 어떤 연산자들과 함수들을 쓸 수 있는가? append,insert       
print(str(list1))              이 자료형은 콘솔에 어떻게 출력되는가?

def square(x):
  return x * x

print(type(1))                 <class 'int'>
print(type("Hello, World!"))   <class 'str'> 
print(type(False))             <class 'bool'>
print(type([1, 2, 3]))          <class 'list'>
print(type(square))             <class 'function'>
print(type(print))              <class 'builtin_function_or_method'> (내장함수)




user자료형 만들기

class User:
    pass

user1 = User()
print(type(user1)
<class '__main__.User'>
여기서 main은 실행한 파일에 정의되어있는 user class의 값

user.py
class User:
    pass
    
object_orinented.py
from user import User

user1 = User()
print(type(user1))
<class 'user.User'>
user파일의 User 클래스를 의미한다.
User라는 자료형을 성공적으로 만들었다.



인스턴스
class User:
    pass

user1 = User()
user2 = User()
print(user1 == user2)

x = [2, 3, 5, 7, 11]                     [2, 3, 5, 7, 11] 여기에 x라는 이름표가 붙어있고
y = x                                    리스트 class에 저장된 이 값을 인스턴스라고 부른다(instance)
y[2] = 4                                 y라는 이름표도 여기에 달리게 됨 
print(x == y)
True

x = [2, 3, 5, 7, 11]                     [2, 3, 5, 7, 11] 여기에 x라는 이름표가 붙어있고
y = [2, 3, 5, 7, 11]                     리스트 class에 저장된 이 값을 인스턴스라고 부른다(instance)
y[2] = 4                                 [2, 3, 5, 7, 11] y라는 이름표는 다른 메모리의 값의 2,3,5,7,9에 달리게 됨 
print(x == y)                            이 값은 리스트의 class의 또 다른 인스턴스(instance)
False (두 변수가 다른 instance를 가지고 있어서)

x = User()                           유저라는 클래스에 x, y 라는 이름표가 붙는다
y = x
print(x == y) 
True

x = User()                          유저라는 클래스에 x 라는 이름표
y = User()                          또 다른 유저라는 클래스에 y 라는 이름표
print(x == y)
False                               다른 메모리 주소에 있는 다른 인스턴스라서

일단 이해하신대로 list1과 list2는 다른 메모리 주소를 가리키고 있는 서로 다른 인스턴스입니다. 그런데 왜 list1 == list2의 결과값으로 True가 나오는지 궁금하신거죠?

값 더하기
3 + 5를 하면 8이 나오고, [1, 2, 3] + [1, 3, 5]를 하면 [1, 2, 3, 1, 3, 5]가 나오고, "hello" + "world"를 하면 "helloworld"가 나오는 이유는 무엇일까요? 그냥 컴퓨터가 저절로 알아서 +를 이해하고 각 경우에 따라서 맞는 방식으로 더하는 것일까요?

사실은 각 class에 +를 어떻게 쓸지 정의해 놓았기 때문에 저런 결과값들이 나오는 것입니다.

class SomeClass:
    def __init__(self, x):
        self.attr1 = x

ex1 = SomeClass(5)
ex2 = SomeClass(3)
print(ex1 + ex2)
파이썬은 SomeClass의 두 값을 더하는 방법을 모르기 때문에 오류가 나옵니다.

TypeError: unsupported operand type(s) for +: 'SomeClass' and 'SomeClass'
이 문제를 고치기 위해서 +를 쓰는 방법을 설명해주는 __add__ 메소드를 정의해야합니다.

class SomeClass:
    def __init__(self, x):
        self.attr1 = x

    def __add__(self, other):
        return self.attr1 + other.attr1

ex1 = SomeClass(5)
ex2 = SomeClass(3)
print(ex1 + ex2)
ex1 + ex2는 ex1.__add__(ex2)와 같습니다. 따라서 ex1.attr1 + ex2.attr1의 결과값인 8이 나오겠죠.

8
값 비교하기
마찬가지로 ==도 어떤 결과값을 낼지 각 class에 정의를 할 수 있습니다. 리스트의 경우에는 순서대로 모두 같은 값을 보관하고 있으면 True가 나옵니다.

그러면 이 경우에는 어떻게 나올까요?

class SomeClass:
    def __init__(self, x):
        self.attr1 = x

ex1 = SomeClass(5)
ex2 = SomeClass(5)
print(ex1 == ex2)
False
==가 어떻게 쓰여야하는지 정의해주지 않으면, 두 자료형이 같은 인스턴스면 True, 아니면 False가 나옵니다. ex1과 ex2는 다른 인스턴스이기 때문에 False가 나옵니다. ==가 어떻게 쓰이는지 설정하기 위해서는 __eq__ 메소드를 쓰면 됩니다.

class SomeClass:
    def __init__(self, x):
        self.attr1 = x

    def __eq__(self, other):
        return self.attr1 == other.attr1

ex1 = SomeClass(5)
ex2 = SomeClass(5)
print(ex1 == ex2)
ex1 == ex2는 ex1.__eq__(ex2)와 같습니다. 따라서 ex1.attr1 == ex2.attr1의 결과값인 True가 나오겠죠.

같은 인스턴스인지 확인하기
==를 떠나서 두 값이 같은 인스턴스인지, 즉 두 값이 같은 메모리 주소를 가리키고 있는지 확인하는 방법이 있습니다.

class SomeClass:
    def __init__(self, x):
        self.attr1 = x

    def __eq__(self, other):
        return self.attr1 == other.attr1

ex1 = SomeClass(5)
ex2 = SomeClass(5)
print(ex1 is ex2)

list1 = [2, 3, 4, 5]
list2 = [2, 3, 4, 5]
print(list1 is list2)
이렇게 is를 쓰면 두 값이 같은 인스턴스인지 아닌지 확인할 수 있습니다.

False
False

이전 섹션들에서는 정수, 문자열, 리스트 등 파이썬에 기본적으로 있는 자료형들로 프로그램을 짰습니다. 
그런데 페이스북같은 SNS를 만들려면 '유저'는 어떻게 표현해야 할까요? 
'유저'는 이름, 이메일, 비밀번호, 생년월일, 친구목록 등 구성이 굉장히 복잡합니다. 문자열 하나로도 표현할 수 없고, 리스트로도 표현할 수 없습니다.

파이썬같은 객체 지향 프로그래밍 언어가 이럴 때 유용해집니다. 

기존의 자료형들로 표현하기 어려운 것들은 우리가 새로운 자료형을 만들어서 표현할 수 있습니다.
SNS를 위해서는 '유저'라는 새로운 자료형을 만들면 되겠죠?

파이썬에서 새로운 자료형을 만들려면 '클래스'라는 것을 써야합니다.
클래스는 어떤 자료형에 대한 설명서라고 생각할 수 있습니다. 한번 직접 '유저'를 표현할 수 있는 자료형을 만들어봅시다.

클래스 정의
일단 클래스의 정의 안에는 pass만 써두겠습니다. pass는 그냥 다른 내용은 쓰지 않겠다고 표시하는 명령어입니다.

class User:
    pass

# User값들 생성
user1 = User()
user2 = User()

# 파이썬의 기본 자료형
print(type(7))
print(type(3.14))
print(type("hello"))
print(type([1, 2, 3, 4, 5]))

# 우리가 만든 자료형
print(type(user1))
print(type(user2))
<class 'int'>
<class 'float'>
<class 'str'>
<class 'list'>
<class '__main__.User'>
<class '__main__.User'>
<class '__main__.User'>라고 나와있는 것을 확인할 수 있습니다. 1이 int 클래스의 값이고 "hello"는 str 클래스의 값입니다. 
비슷한 개념으로 user1과 user2는 우리가 실행한 파일(main 파일)에 정의되어 있는 User 클래스의 값이란 뜻입니다.

인스턴스
class User:
    pass

user1 = User()
user2 = User()

print(user1 == user2)
False
분명 user1과 user2는 똑같이 User()를 써서 생성하였는데 왜 False가 출력될까요?

User()를 호출하면 메모리의 특정 공간에 새로운 User 값이 생성되고, 
그 메모리 주소가 리턴돼서 user1과 user2에 저장됩니다. 
그런데 User()를 호출할때마다 새로운 메모리 공간에 값을 생성하기 때문에 user1과 user2는 엄밀히 따지면 다른 값, 또는 다른 인스턴스입니다.
따라서 user1 == user2는 False가 나오는 것입니다!




리스트 vs 인스텐스
안녕하세요~

class의 인스턴스 강의를 수강 중 의문점이 들어서요. 가령, 코드를 다음과 같이 구현하였을 경우,

class User:
    pass

user1 = User()
user2 = User()

print(user1 == user2)
False
결과는 False인것을 확인하였습니다.

이유는, user1과 user2가 각각 서로 다른 메모리에 저장되어있기 때문에, 엄밀히 따지면 서로 다른 값이 저장된 것이라고 설명해주셨습니다.

하지만, 위 설명대로라면, '서로 다른 메모리에 저장된 변수?클래스?는 다른 값을 갖는다' 를 의미하게 되는데, 아래의 코드를 보면,

test1 = [1,2,3]
test2 = [1,2,3]
print(test1 == test2)
True
test1과 test2를 각각 따로 선언해주었기 때문에 다른 메모리에 저장이 돼있을 것으로 보입니다. 그러나 서로 다른 메모리에 저장되어있다 하더라도 각 메모리에 저장된 값음 같은것이기 때문에 위의 결과는 True가 나온것 같습니다.

이전부터 조금 인스턴스 관련해서 개념이 잘 안잡힌것 같은데, 조금만 더 명확히 설명해주실수 있을까요?

감사합니다.

User()는 User 클래스의 새로운 인스턴스를 만드니까 user1랑 user2는 아예 다른 User이며 말씀하신 대로 다른 메모리에 저장됩니다. test1랑 test2는 우리가 만든 클래스가 아니라 파이썬의 기본 자료형인 List입니다. 파이썬은 List나 Set같은 기본 자료형들을 어떻게 비교 해야 하는지 알지만 우리가 만든 클래스는 우리가 수정하지 않는 이상 비교하는 방법을 몰라서 안에 있는 값들은 안 보고 똑같은 인스턴스인지만 봅니다.

기본 자료형인 Set로 예를 들면 set1 = {'a', 'b'} set2 = {'a', 'b'} print(set1 == set2)의 결과는 true입니다. Set는 클래스가 아니고 set1하고 set2는 클래스 인스턴스가 아니기 때문이죠.

도움이 되셨길 바랍니다. 아직 헷갈리면 알려주세요.
즉, 클래스는 내가 만든 것 이기 때문에 기존의 python언어 에서 구현해 둔 것과 달리 list라는 
