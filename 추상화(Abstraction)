추상화란? 복잡한 세부사항을 숨기고 주요한 기능에 집중할 수 있게 해주는 개념으로, 변수와 함수가 그 예입니다.


                                  - 하드웨어 ?
              - Behind the Scenes - 소프트웨어 ??
                                  - 통신 ???
스마트폰 통화 - 

              - 현실 - 그냥 저런거 모르고 스마트폰 사용함 
             
          
          -  변수 (Variable): 값을 저장
              ex) first_name = "재석"
                  last_name = "유"
                  full_name = last_name + first_name

추상화    -   함수 (Function): 명령들을 저장
              ex)  print(1
         
          
          
          -   객체 (class)
          

변수(variable) 
= : 지정 연산자(Assignment Operator) 가 있으면 오른쪽 부터 계산
x = 2 + 1
print(x) 3

x = x + 1
print(x) 4

print(100/9.58)
#우사인 폴트의 평균 속도 = 10.438413316 m/s
print(10.438413316 * 60)
print(10.438413316 * 120)
print(10.438413316 * 180)
이해하기 힘들다, 알아보기 쉽게 만들어야한다

speed = 10.438413316 
print(speed * 60)
print(speed * 120)
print(speed * 180)

함수 기초
#함수 (Function)
#내장 함수 (Built-in Function): (print,int,str)
# comment/빈줄 모두 무시 in python
def = define(정의)

def hello():           (header part)
  print("Hello, World!")                       (body part, 반드시 tab키로 들여쓰기해야함)
  print("Welcome to Codeit!")
  
hello() 함수 호출 하면 (제일 위로 올라가서 hello라는 함수를 찾기 시작하고 body내용을 순서대로 실행)
                       (즉, 함수 정의는 처음에는 무시, 그러나 호출되면 실행)
                       

함수 (Function with Parameters)
def hello(name):
  print("Hello, %s!" % (name))                       (body part, 반드시 tab키로 들여쓰기해야함)
  print("Welcome to Codeit!")

hello("유재석")
hello("김태희")

두 수의 합을 출력하는 함
def print_sum(a, b):
  print(a + b)

print_sum(4, 2) --> 6

#프로필을 출력하는 함수
def print_profile(name, age):
    print(name)
    print(age)

my_name = "김연우"
my_age = 45

print_profile(my_name, my_age)

함수 정리:
변수가 값을 보관하는 역할을 한다면, 함수(function)는 명렬들을 보관하는 역할을 합니다. 동일한 내용을 반복하여 쓰고 있거나,
프로그램을 깔끔하게 정리하고 싶을 때 함수를 사용하면 되는것이다.

수학에서는 독립 변수 x의 값(입력값)을 넣었을 때, 종속 변수 y의 값(결과값)이 나오는 것을 함수라 한다.
파이썬 프로그램에서 함수는 더 다양한 방법으로 쓰인다.

1. 입력값이 있을 수도 없을 수도 있다.
2. 입력값과 결과값이 "수"로 한정되는 것이 아니라, 문자열, 리스트, 불린 등 어떤 자료형이든 될 수 있다.
(심지어 입력값과 결과값이 또 다른 함수가 될 수도 있다)

들여쓰기 (Indentation) (tab키 or 공백 4칸):
파이썬에서 들여쓰기는 매우 중요한 역할을 차지합니다. 들여쓰기의 단계에 따라 논리의 층위가 나뉘기 때문입니다.
동일한 논리단계에 있어 들여쓰기의 정도가 같은 명령들의 집합을 블록(block)이라고 부른다
아래 예시는 잘못된 들여쓰기의 오류이다.
def next_number(n):
    m = n+1
        print(m)

next_number(3)

result: File "untitle.py", line 3
    print(m)
    ^
IndentationError: unexpected indent

옳은 버전은
def next_number(n):
    m = n + 1
    print(m)

next_number(3)
4

추상화(Abstraction) 꿀팁
Syntactic Sugar
# 다음 두 줄을 같습니다.
x = x + 1
x += 1

x = x + 2
x += 2

x = x * 2
x *= 2

x = x - 3
x -= 3

x = x / 2
x /= 2

Optional Parameters:
파라미터의 기본값을 설정해두면 함수 호출을 할 때 파라미터에 해당되는 값을 넘겨주지 않았을 경우, 그 파라미터는 
기본값을 갖게 됩니다. 이런 파라미터를 optional parameter라고 부릅니다. 아래의 코드에서 마지막 파라미터를 써주지
않으면 nationality는 "한국"의 값을 갖게 된다.
def myself(name, age, nationality = "한국"):
    print("내 이름은 %s" % name)
    print("나이는 %d살" % age)
    print("국적은 %s" % nationality)

myself("코드잇", 1)           # 기본값이 설정된 파라미터를 바꾸지 않을 때
myself("코드잇", 1, "미국")   # 기본값이 설정된 파라미터를 바꾸었을 때

내 이름은 코드잇
나이는 1살
국적은 한국
내 이름은 코드잇
나이는 1살
국적은 미국

Optional Parameter는 모두 마지막에 있어야 합니다. 아래와 같이 마지막이 아닌 경우에는 말이 안 된다.
def myself(name, nationality = "한국", age):
    print("내 이름은 %s" % name)
    print("나이는 %d살" % age)
    print("국적은 %s" % nationality)

myself("코드잇", 1)
myself("코드잇", "미국", 1)

File "myself.py", line 1
    def myself(name, nationality = "한국", age):
      ^
SyntaxError: non-default argument follows default argument































