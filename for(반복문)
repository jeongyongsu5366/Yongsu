big_bang = ["A", "B", "C", "D", "E"]

i = 0
while i < len(big_bang):
  print(big_bang[i])
  i = i + 1
  
여기서 값 i는 index 역할을 하는 것을 제외하고는 아무 역할을 하지않는다.
이때 for 문을 사용하면 훨씬 효율적이다

for member in big_bang:
  print(member)

for 문에서 member는 for loop의 execution 부분에서만 사용되고
사라지는 local variable이다.

A
B
C
D
E

for num in [1, 3, 5, 7, 9]:
    print(num * num)
 1
 9
 25
 49
 81
 
 range 함수
 1 ~ 10 까지 출력
 for i in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
     print(i)
 너무 길고 귀찮다 하나하나 다 적기는
 range는 parameter를 하나, 두 개, 세개 사용이 가능하다
 
 for i in range(m)                      --> 0부터 m - 1 까지의 범위
    print(i)
    
 피타고라스 수 다시 풀어보기
 
 for i in range(n, m):                  --> n부터 m - 1 까지의 범위
    print(i)                               

for i in range(n, m, s):                --> n부터 m - 1 까지의 범위, 간격이 1이 아니라 s
    print(i)              
 
for i in range(3, 17, 3):    == for i in [3, 6, 9, 12, 15]:
    print(i)                       print(i)
    
range 장점
1. 간편함
2. 깔끔함
3. 메모리 효율성



numbers = [2, 4, 6, 8, 10, 12, 14, 16]

for i in range(len(numbers)):
    print(i, numbers[i])
 
or

for i in numbers:
    print(numbers.index(i), i)



Aliasing:

x = 5                            정수 5에 x라는 이름표를 붙여준다.            동그라미에 x 태그 y 태그 가 둘 다 달려있는모양
y = x                          이 정수에 y라는 이름표가 하나 더 발생한다. 
y = 3                            이렇게 해주면 y라는 이름표가 이제 정수 3에 붙게된다.
                                각 이름표는 하나에만 붙을 수 있다.
print(x)                         
print(y)
5
3

x = [2, 3, 5, 7, 11]                  2, 3, 5, 7, 11 가진 list에 x라는 이름표가 붙는다.
y = x                                 이 같은 리스트에 y라는 이름을 달아준다.
y[2] = 4                              이 리스트가 x라는 이름표와 동시에 y라는 이름표를 가지고 있고
print(x)                              이 리스트가 [2, 3, 4, 7, 11] 로 똑같이 바뀐 값을 출력한다.
print(y)                              여기서 y는 가명이라고도 불린다 (Alias)
[2, 3, 4, 7, 11]
[2, 3, 4, 7, 11]

그렇다면, y를 바꾸면서 x의 값을 그대로 유지하려면
x = [2, 3, 5, 7, 11]                2, 3, 5, 7, 11 가진 list에 x라는 이름표가 붙고.
y = list(x)                         list 함수 때문에 위 리스트와 똑같은 리스트가 하나 더 생성된다.
y[2] = 4                            이 리스트에는 이름표 y가 붙는다.
print(x)                            [2, 3, 5, 7, 11]
print(y)                            [2, 3, 4, 7, 11]


엘리어싱 (Aliasing)
그럼 이 프로그램을 실행하면 어떠한 결과값이 나올까요?

x = [2, 3, 5, 7, 11]
y = x
y[2] = 4
print(x)
print(y)
[2, 3, 4, 7, 11]
[2, 3, 4, 7, 11]
앞서 본 변수의 예처럼 x는 [2, 3, 5, 7, 11]이 나오고, y는 [2, 3, 4, 7, 11]이 나올줄 알았는데, 결과가 예상과 다르죠? 
y의 원소만 바꾸었을 뿐인데, 왜 x와 y가 똑같이 [2, 3, 4, 7, 11]로 변했을까요?

엘리어싱(Aliasing)이라는 개념 때문입니다. 코드의 첫 번째 줄에서는 [2, 3, 5, 7, 11] 리스트에 x라는 이름표를 달아줍니다. 두 번째 줄에서 y = x라는 명령에 의해, 그 같은 리스트에 y라는 이름표를 달아줍니다.
세 번째 줄에서 리스트 y의 인덱스 2의 값을 4로 바꿔주면, 리스트는 [2, 3, 4, 7, 11]이 됩니다.

그런데 바뀐 [2, 3, 4, 7, 11]이라는 리스트가 y라는 이름표 뿐만 아니라, x라는 이름표도 갖고 있었죠?
그래서 x와 y를 출력하라는 명령이 있을 때, 모두 같은 [2, 3, 4, 7, 11]이 출력되는 것입니다. 두 변수가 서로 이름은 다르지만, 사실 같은 메모리 주소에 있는 값을 가리키고 있기 때문에 동일한 리스트가 출력된거죠. y는 x의 Alias(가명)라고 얘기할 수 있습니다.

리스트 복사
하지만 간혹 엘리어싱을 이용하지 않고 리스트의 원본을 그대로 둔 채, 리스트의 복사본만 바꾸고 싶을 때가 있습니다.
즉 x라는 원본의 리스트는 그대로 둔 채, y 리스트의 값만 바꾸고 싶은 경우. 이럴 때는 list 함수를 사용하면 됩니다. list 함수는 원본을 복사해서 새로운 공간에 붙여넣고, 그 새로운 공간의 리스트를 리턴시켜줍니다.

x = [2, 3, 5, 7, 11]
y = list(x)
y[2] = 4
print(x)
print(y)
[2, 3, 5, 7, 11]
[2, 3, 4, 7, 11]
첫 번째 줄에서 [2, 3, 5, 7, 11]을 가진 리스트에 x라는 이름표가 달립니다. 두 번째 줄에서 y = list(x)라는 명령에 의해, x 리스트의 복사본이 새로운 공간에 만들어지고 그 복사본에 y라는 이름표가 달립니다. 즉 x와 y의 리스트는 서로 다른 메모리 주소에 저장되어 있는거죠.

따라서 세 번째 줄에서 y 리스트의 인덱스 2의 값을 바꾸는 행위는, x 리스트에 아무런 영향을 미치지 않습니다. 이로써 x와 y를 출력하라는 명령이 있을 때, 각각 [2, 3, 5, 7, 11]과 [2, 3, 4, 7, 11]이 출력되는 것입니다.

















