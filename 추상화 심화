return 문

return문의 역할:
1. 함수 호출 부분을 return을 따라는 값으로 대체시킨다.
2. 현재 함수의 실행을 멈추고 함수 호출이 끝나는 지점부터 다시 진행한다.

수학
f(x) = x+1

g(x) = x^2-1

f(2) = 2 + 1 = 3
g(3) = 3^2 - 1 = 9 - 1 = 8

파이썬
def f(x):
  return x + 1

def g(x):
  return x * x - 1
  
print(f(2))  #print(3)과 같음    f라는 이름을 가진 함수를 찾으러 위로 다시 올라감
print(g(3))  #print(8)과 같음    g라는 이름을 가진 함수를 찾으러 위로 다시 올라감
print(f(2) + g(3)) #print(3 + 8)과 같음

def f(x):
  print("f 시작")
  return x + 1
  print("f 끝")        --> 애들을 dead code라고 부른다

def g(x):
  print("g 시작")
  return x * x - 1
  print("g 끝")         --> dead code

print(f(2))
print(g(3))
print(f(2) + g(3))

f 시작
3                        f 끝/ g 끝이 실행되지 않은 이유는 return 문이 불리면
g 시작                    실행중인 함수가 끝난다.
8
f 시작
g 시작
11

return vs print

def print_square(x):
   print(x * x)

def get_square(x):
   return x * x

print_square(3)
9

get_square(3) = 9 하지만 아무것도 뜨지 않음 그냥 return 값임
실행 시킬려면
print(get_square(3))

그리고 print 값이 있는 print_square를 print로 출력하면
이 값의 return 값을 출력해야 하는데
print(print_square(3))
이렇게 되면 return 값이 없기 때문에 "None"을 출력한다.


global 변수 vs local 변수

def x_is_one():
  x = 1

x_is_one()
print(x) 

NameError: name 'x' is not defined
함수 내에 정의된 변수는 local 변수이다, 한 부분에서만 사용가능

def x_is_one():
  x = 1

x = 5        -->이 x는 global 변수이다.
x_is_one()
print(x) 

5

만약에 함수안에 있는 변수를 global변수로 사용하고 싶으면

def x_is_one():
  global x         -->이런 식으로 global을 직접 표시해서 바꿔준다.
  x = 1

x = 5
x_is_one()
print(x) 

1

def next_number():
    global x
    x = x + 1
 
 x = 0
 next_number()
 print(x)
 
 1
 
 1. (105)번 줄에서 x가 0으로 지정된다. 이는 함수 밖에서 정의된 global 변수 x 입니다.
 2. (106)번 줄에서 next_number() 때문에 함수가 정의된 (101)번 줄로 이동합니다.
 3. (102)번 줄의 global x는 함수 안의 x와 함수 밖의 x를 통일시켜줍니다.
 4. (103)번 줄에서 x = x + 1의 명령에 따라, 기존에 0의 값을 가졌던 x가, 새롭게 1의 값을 가지게 됩니다.
 5. 함수가 끝나면, (106)번 줄 끝으로 이동한 후 (107)번 줄의 명령을 실행합니다. 현재 x의 값 1이 출력됩니다.
 
 주의: 여러 함수에서 통일된 global 변수를 쓰면 한번의 실수로 프로그램 전체에 영향을 줄 수 있습니다. global 변수를
 꼭 써야하는 상황인지 신중하게 생각해보고 쓰셔야합니다.


함수 심화 퀴즈 (다시 풀어보기)

상수 (constant) (global 변수의 가장 자연스럽고 좋은 예)
1. 상수의 이름은 모두 대문자로 설정
2. 바뀌지 않는 값
PI = 3.14

def calculate_area(r):
  return PI * r * r

radius = 6
print("반지름이 %f면 원 넓이는 %f % (radius, calculate_area(radius))

PI = 0
radius = 12
print("반지름이 %f면 원 넓이는 %f % (radius, calculate_area(radius))

반지름이 6.000000면 원 넓이는 113.040000
반지름이 12.000000면 원 넓이는 0.000000

원주율과 같이 프로그램 내내 바뀌지 않는 값이 바로 상수입니다. 상수의 이름은 대문자로 써주는 것이
파이썬 커뮤니티의 규칙입니다. 상수는 처음에 설정하고 절대로 바꾸면 안됩니다. 바꿀 거였으면 애초부터 
상수 대신 일반적인 변수로 만들면 되겠죠? 파이썬 언어상으로는 상수를 바꿔도 오류가 안 나오지만, 상수를
절대로 바꾸지 않는건 우리들만의 아름다운 약속입니다. 꼭 지켜주세요!



스타일 (올바르게 작동해도 사람들이 이해하기 쉽게 작성해야 좋은 코드이다)
print(6.28*4)
print(3.14*4*4)
print(4/3*3.14*44*4)

실행시 원하는 값이 나오지만 코드를 읽는 사람 입장에서는 위 숫자와 
무슨 의도/목적/의미로 저 코드를 사용헸는지 알 방법이 없다.

PI = 3.14
radius = 4
print(6.28 * radius)
print(PI * radius * radius)

radius = 8
print(2 * PI * radius)

그래도 아직 좋은 스타일은 아니다

PI = 3.14

# 반지름이 r인 원의 둘레 계산
def calculate_circumference(r):
   return 2 * PI * r

# 반지름이 r인 원의 넓이 계산
def calculate_area(r):
   return PI * r * r
   
# 반지름이 4인 경우
radius = r
print(calculate_circumference(radius))
print(calculate_area(radius))
print(calculate_volume(radius))












